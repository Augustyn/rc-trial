@startuml
' Idea for model in Firebase store
' Organizer

namespace organizer #DDDDDD {
    class Car{
        Chassis
        WheelBase
        WheelDiameter
    }

    class Organization{
        Name
        Logo
    }

    class Event{
        Name
        StartDate
        EndDate
        Description
    }

    class EventSeries

    class Role

    class User{
        Name
        Email
    }

    class Judge

    class Driver


    class CarCategory

    class Invitation {
        Link
    }

    class QRInvitation


    Event <-- Organization: organizes
    Event *-- EventSeries: joins
    Event -* CarCategory: has assigned
    User -> Role : is in
    Role <|--- Judge
    Role <|-- Driver
    Event <--- Driver
    Car . (Event,Driver)
    Car --> CarCategory
    (User,Role) . AssignedTo
    Organization --> EventSeries: creates
    User --> Organization: owner
    Organization --> CarCategory : defines
    (CarCategory,Event) .. JudgeAssignment
    JudgeAssignment --> Judge : assigned to
    JudgeAssignment --> Invitation
    Invitation <|-- QRInvitation
}

' Judge
namespace judge #DDDDDD{
    class Event
    class Os
    class Log
    class LogEvent
    class Notification
    class Rules
    class SpecialEvent

    Os *-- Event : consist of
    Event -> Log: has
    Log --o LogEvent
    organizer.User <-- Notification : emmited by
    Notification --> LogEvent
    organizer.Judge -> LogEvent : creates
    LogEvent <|-- SpecialEvent
    organizer.Judge -> SpecialEvent : creates
    SpecialEvent -> Rules: uses
}

' Driver
namespace driver #DDDDDD {
    class Comment
    class ScoringBoard

    organizer.User <---- Comment : post
    ScoringBoard o-- judge.Log : builds from
    ScoringBoard <|---- organizer.EventScoringBoard
    ScoringBoard <|-- GeneralScoringBoard
    ScoringBoard --> Comment

    organizer.User ----> ScoringBoard : private
    Event ----> organizer.EventScoringBoard
    EventSeries ----> organizer.GeneralScoringBoard
}
@enduml
